WSL Installation:
https://learn.microsoft.com/en-us/windows/wsl/install

1. Open PowerShell in Admin Mode

2. Run:

    wsl --install

3. Restart Computer

4. (Optional) To see available linux distros, run:

    wsl --list --online

5. Install distro:

    wsl --install Ubuntu-22.04

6. Create username and password

7. Verify version by running:

    wsl -l -v

   Version should be 2.

Install WSL Extension in VSCode

Open Ubuntu, run:

    code .

ROS2 Humble Installation:
https://docs.ros.org/en/humble/Installation.html

In VSCode bash terminal:

1. Locale Configuration

    locale  # Check current locale settings
    sudo apt update && sudo apt install locales
    sudo locale-gen en_US en_US.UTF-8
    sudo update-locale LC_ALL=en_US.UTF-8 LANG=en_US.UTF-8
    export LANG=en_US.UTF-8
    locale  # Confirm updated locale settings

2. Software Properties and Universe Repository

    sudo apt install software-properties-common
    sudo add-apt-repository universe

3. Curl Installation and ROS Key

    sudo apt update && sudo apt install curl -y
    sudo curl -sSL https://raw.githubusercontent.com/ros/rosdistro/master/ros.key -o /usr/share/keyrings/ros-archive-keyring.gpg

4. ROS2 Sources Configuration
    
    echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/ros-archive-keyring.gpg] http://packages.ros.org/ros2/ubuntu $(. /etc/os-release && echo $UBUNTU_CODENAME) main" | sudo tee /etc/apt/sources.list.d/ros2.list > /dev/null

5. Update and Upgrade
  
    sudo apt update
    sudo apt upgrade

6. ROS Desktop Installation

    sudo apt install ros-humble-desktop

7. ROS Environment Setup

    source /opt/ros/humble/setup.bash

8. ROS2 Command Check

    ros2 


Sourcing Setup.bash

Go to .bashsrc in VSCode, add the following line at the end:

    source /opt/ros/humble/setup.bash

#############################################################################################################
The following will be in VSCode after opening it with "code ." using Ubuntu or connecting to WSL from VSCode.
#############################################################################################################

Running Executables

    sudo apt update
    sudo apt install ros-humble-turtlesim

See list of packages:

    ros2 pkg list

See list of <packages, executables>:

    ros2 pkg executables

See list of executables from turtlesim packages

    ros2 pkg executables turtlesim

[Optional] To find turtlesim:

        cd /opt/ros/humble
        code .
        ctrl + p
        search: turtlesim

It should be in: share/ament_index/resourse_index/packages

Running turtlesim:

To see options:

    ros2 run -h

To run an executable from a package:

    ros2 run <package_name> <executable_name>

To run turtlesim node:

    ros2 run turtelsim turtelsim_node

To run turtlesim teleop mode (controlable mode):

    ros2 run turtlesim turtle_teleop_key

/////////////////////////////////////////////////////////////////////////////
NOTE: 
    The way ROS works is that it sends and recieves data between nodes,
    basically executables, through different ways like topics, services,
    and actions.
/////////////////////////////////////////////////////////////////////////////

ROS2 Node Commands:

1. See ros2 node help:

    ros2 node -h

2. List currently running nodes:

    ros2 node list

3/4. Run the turtlesim node and try previous command.

5. See node info:

    ros2 node info <node_name>

    for turtlesim:

    ros2 node info /turtlesim

#############################################################################################################
The following commands may only work as intended if the required turtlesim nodes are active.
See commands in previous section for how to start them if you don't remember.
#############################################################################################################

ROS Topic:
Topics are connections between two nodes, like a publisher node and a subscriber node.
The publisher node sends data to a topic, or publishes it to the topic, and the subscriber node recieves that published data from the topic.
Here, there is always a stream of data being continuously published or subscribed.

To see list of topics:
    
    ros2 topic list

    to see details:

    ros2 topic list -t

Start rqt graph, uncheck hide boxes to see hidden topics:

    rqt_graph

To see topic output:

    ros2 topic echo <topic_name>

    for turtlesim, to see the cmd_velocity:

    ros2 topic echo /turtle1/cmd_vel

To see interface definition:

    ros2 interface show <type>

    ros2 interface show geometry_msgs/msg/Twist

Publish data to a topic:

    ros2 topic pub <topic_name> <msg_type> '<args>'

    To publish movement data to turtlesim:

    ros2 topic pub --once /turtle1/cmd_vel geometry_msgs/msg/Twist "{linear: {x: 2.0, y: 0.0, z: 0.0}, angular: {x: 0.0, y: 0.0, z: 1.8}}"

    here, the --once option runs the publish once to the topic.
    To publish the data at a specific rate continuously:

    ros2 topic pub --rate 1 /turtle1/cmd_vel geometry_msgs/msg/Twist "{linear: {x: 2.0, y: 0.0, z: 0.0}, angular: {x: 0.0, y: 0.0, z: 1.8}}"

    here, the --rate sets how many hertz, or how many times a second the topic is published to.

Echo the pose topic:

    ros2 topic echo /turtle1/pose

View topic frequency:

    ros2 topic hz <topic_name>

    for the turtlesim pose topic:

    ros2 topic hz /turtle1/pose


ROS Service
In services, data is not continuously published.
The service connects the server node and client node.
The client requests data and the server needs to respond before the client can recieve the data.

List all service names:

    ros2 service list

    To see the service types:
    ros2 service list -t

Another way to view service type:

    ros2 service type <service_name>

    for example,

    ros2 service type /clear

    this would return the service type of the /clear service.

To find services with a specific type:

    ros2 service find <service_type>

    for example,

    ros2 service find std_srvs/srv/Empty

    this returns all services with the type 'std_srvs/srv/Empty'.

To see interface:

    ros2 interface show <service_type>

    for example,

    ros2 interface show turtlesim/srv/Spawn

    this basically just shows you the basic data related to the service type, like its variables.

To call a service:

    ros2 service call <service_name> <service_type>

    for example,

    ros2 service call /clear std_srvs/srv/Empty

    this calls the clear service to clear the screen of the path made by the turtle.

    ros2 service call /spawn turtelsim/srv/Spawn "{x: 2, y: 2, theta: 0.2, name: ''}"

    this calls the spawn service to create a new turtle at the specified location.
    by default, this spawns the turtle off screen near the bottom left hand corner (you need to enlarge the screen to see it).


ROS Parameters

To see list of parameters:

    ros2 param list

To get parameter values:

    ros2 param get <node_name> <parameter_name>

    for example,

    ros2 param get /turtlesim background_g

    this shows the value for the window's background green value.

To set a parameter's value:

    ros2 param set <node_name> <parameter_name> <value>

    for example,

    ros2 param set /turtlesim background_g 255

    this sets the background_g value to 255.

To view all the parameters for a node:

    ros2 param dump <node_name>

    for example,

    ros2 param dump /turtlesim 

    this shows all the parameters and their values for the turtlesim node.

To store these values in a yaml file:

    ros2 param dump <node_name> > <yaml_file_name>.yaml

    for example,

    ros2 param dump /turtlesim > turtlesim.yaml

    this saves the parameters and their values in a yaml file.

To load parameters from a yaml file:

    ros2 param load <node_name> <yaml_file>.yaml

    for example,

    ros2 param load /turtlesim turtlesim.yaml

    this loads the parameter values in the yaml file into the turtlesim node.

To load the parameters on startup:

    ros2 run <package_name> <executable_name> --ros-args --params-file <file_name>

    for example,

    ros2 run turtlesim turtlesim_node --ros-args --params-file turtlesim.yaml
    
WSL Installation:
https://learn.microsoft.com/en-us/windows/wsl/install

1. Open PowerShell in Admin Mode

2. Run:

    wsl --install

3. Restart Computer

4. (Optional) To see available linux distros, run:

    wsl --list --online

5. Install distro:

    wsl --install Ubuntu-22.04

6. Create username and password

7. Verify version by running:

    wsl -l -v

   Version should be 2.

Install WSL Extension in VSCode

Open Ubuntu, run:

    code .

ROS2 Humble Installation:
https://docs.ros.org/en/humble/Installation.html

In VSCode bash terminal:

1. Locale Configuration

    locale  # Check current locale settings
    sudo apt update && sudo apt install locales
    sudo locale-gen en_US en_US.UTF-8
    sudo update-locale LC_ALL=en_US.UTF-8 LANG=en_US.UTF-8
    export LANG=en_US.UTF-8
    locale  # Confirm updated locale settings

2. Software Properties and Universe Repository

    sudo apt install software-properties-common
    sudo add-apt-repository universe

3. Curl Installation and ROS Key

    sudo apt update && sudo apt install curl -y
    sudo curl -sSL https://raw.githubusercontent.com/ros/rosdistro/master/ros.key -o /usr/share/keyrings/ros-archive-keyring.gpg

4. ROS2 Sources Configuration
    
    echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/ros-archive-keyring.gpg] http://packages.ros.org/ros2/ubuntu $(. /etc/os-release && echo $UBUNTU_CODENAME) main" | sudo tee /etc/apt/sources.list.d/ros2.list > /dev/null

5. Update and Upgrade
  
    sudo apt update
    sudo apt upgrade

6. ROS Desktop Installation

    sudo apt install ros-humble-desktop

7. ROS Environment Setup

    source /opt/ros/humble/setup.bash

8. ROS2 Command Check

    ros2 


Sourcing Setup.bash

Go to .bashsrc in VSCode, add the following line at the end:

    source /opt/ros/humble/setup.bash

#############################################################################################################
The following will be in VSCode after opening it with "code ." using Ubuntu or connecting to WSL from VSCode.
#############################################################################################################

Running Executables

    sudo apt update
    sudo apt install ros-humble-turtlesim

See list of packages:

    ros2 pkg list

See list of <packages, executables>:

    ros2 pkg executables

See list of executables from turtlesim packages

    ros2 pkg executables turtlesim

[Optional] To find turtlesim:

        cd /opt/ros/humble
        code .
        ctrl + p
        search: turtlesim

It should be in: share/ament_index/resourse_index/packages

Running turtlesim:

To see options:

    ros2 run -h

To run an executable from a package:

    ros2 run <package_name> <executable_name>

To run turtlesim node:

    ros2 run turtelsim turtelsim_node

To run turtlesim teleop mode (controlable mode):

    ros2 run turtlesim turtle_teleop_key

/////////////////////////////////////////////////////////////////////////////
NOTE: 
    The way ROS works is that it sends and recieves data between nodes,
    basically executables, through different ways like topics, services,
    and actions.
/////////////////////////////////////////////////////////////////////////////

ROS2 Node Commands:

1. See ros2 node help:

    ros2 node -h

2. List currently running nodes:

    ros2 node list

3/4. Run the turtlesim node and try previous command.

5. See node info:

    ros2 node info <node_name>

    for turtlesim:

    ros2 node info /turtlesim

ROS Topic:

To see list of topics:
    
    ros2 topic list

    to see details:

    ros2 topic list -t

Start rqt graph, uncheck hide boxes to see hidden topics:

    rqt_graph

To see topic output:

    ros2 topic echo <topic_name>

    for turtlesim, to see the cmd_velocity:

    ros2 topic echo /turtle1/cmd_vel

To see interface definition:

    ros2 interface show <type>

    ros2 interface show geometry_msgs/msg/Twist

Publish data to a topic:

    ros2 topic pub <topic_name> <msg_type> '<args>'

    To publish movement data to turtlesim:

    ros2 topic pub --once /turtle1/cmd_vel geometry_msgs/msg/Twist "{linear: {x: 2.0, y: 0.0, z: 0.0}, angular: {x: 0.0, y: 0.0, z: 1.8}}"

    here, the --once option runs the publish once to the topic.
    To publish the data at a specific rate continuously:

    ros2 topic pub --rate 1 /turtle1/cmd_vel geometry_msgs/msg/Twist "{linear: {x: 2.0, y: 0.0, z: 0.0}, angular: {x: 0.0, y: 0.0, z: 1.8}}"

    here, the --rate sets how many hertz, or how many times a second the topic is published to.

Echo the pose topic:

    ros2 topic echo /turtle1/pose

View topic frequency:

    ros2 topic hz <topic_name>

    for the turtlesim pose topic:

    ros2 topic hz /turtle1/pose


